AbouTrab et al.\cite{aboutrab2013testing},Testing real-time embedded systems using timed automata based approaches,A,test strategy evaluation,n/a,spec.,N,hand.,,hand.,,well,n/a,n/a,C,n/a,n/a,N,
Aichernig et al.\cite{aichernig2011efficient}*,Efficient Mutation Killers in Action,G,test data generation,int.,spec. (E),Y,exi.,exi.,,$\mu$-java,not suff.,n/a,n/a,java,n/a,n/a,N,
Aichernig et al.\cite{aichernig2015killing},Killing strategies for model-based mutation testing,G,test data generation,n/a,spec. (E),Y,exi.,exi.,,$\mu$-java,well,manual invest.,n/a,UML,S,S,N,
Ali et al.\cite{ali2007state},A state-based approach to integration testing based on UML models,A,test strategy evaluation,int.,spec.,N,n/a,,n/a,,well,n/a,n/a,java,P,P,Y,
Andrews et al.\cite{andrews2003general} ,General test result checking with log file analysis, A , test oracle,unit,spec.,N,self.,,self.,Self-written,well, n/a , mutant sample, C ,"P, S",S,N,
Andrews et al.\cite{andrews2006using} ,Using mutation analysis for assessing and comparing testing coverage criteria, A , test strategy evaluation ,n/a,struc. ,N,exi. ,,exi. , \cite{andrews2003general} ,well,  not killed as equivalent , mutant sample, C ,S,S,Y,*
Androutsopoulos et al.\cite{androutsopoulos2014analysis},An analysis of the relationship between conditional entropy and failed error propagation in software testing,A,test strategy evaluation,n/a,others,Y,exi.,exi.,,SMT-C,well,n/a,"fixed number, weak mutation",C,"S, M",M,N,
Antoniol et al.\cite{antoniol2002case},A case study using the round-trip strategy for state-based class testing,A,test strategy evaluation,n/a,spec.,N,n/a,,n/a,,well,n/a,n/a,C++,S,S,N,*
Arcaini et al.\cite{arcaini2015using},Using mutation to assess fault detection capability of model review,A,model review,n/a,others,N,n/a,,n/a,,well,model checker,n/a,spec.,n/a,n/a,Y,*
Arcuri and Briand\cite{arcuri2011adaptive},Adaptive random testing: An illusion of effectiveness?,A,test strategy evaluation,n/a,spec.,Y,exi.,exi.,,MuJava,well,  not killed as equivalent ,mutant sample,java,"P, S",S,N,
Asoudeh and Labiche\cite{asoudeh2014multi},Multi-objective construction of an entire adequate test suite for an EFSM,A,test data generation,n/a,spec. (E),Y,exi.,exi.,,MAJOR,well,n/a,n/a,java,n/a,n/a,N,
Au{\ss}erlechner et al.\cite{ausserlechner2013right},The right choice matters! SMT solving substantially improves model-based debugging of spreadsheets,A,fault localisation,other,others,N,n/a,,n/a,,well,n/a,n/a,spread-sheet,n/a,n/a,Y,
Baker and Habli\cite{baker2013empirical},An empirical evaluation of mutation testing for improving the test quality of safety-critical software,A,test strategy evaluation,n/a,struc. ,"Y, N","exi., hand.",exi.,hand.,MILU,well,manual invest.,n/a,"C, Ada",P,P,N,*
Bandyopadhyay and Ghosh\cite{bandyopadhyay2009test},Test input generation using UML sequence and state machines models,A,test data generation,unit,spec.,Y,exi.,exi.,,MuJava,well,n/a,n/a,java,S,S,N,*
Bardin et al.\cite{bardin2015sound},Sound and quasi-complete detection of infeasible test requirements,G,test data generation,unit,hybrid ,Y,exi.,exi.,,MuJava,well,n/a,weak mutation,java,"P, S",S,Y,
Bartolini et al.\cite{bartolini2011bringing},Bringing white-box testing to service oriented architectures through a service oriented approach,A,test-suite reduction,n/a,hybrid ,N,hand.,,hand.,,not suff.,n/a,selection strategy,PHP,S,S,Y,
Baudry et al.\cite{baudry2000building},Building trust into oo components using a genetic analogy,G,"test data generation, test strategy evaluation",unit,struc. (E),N,exi. ,,exi. ,$\mu$Slayer,well,manual invest.,n/a,Eiffel,n/a,n/a,Y,
Baudry et al.\cite{baudry2002genes}*,Genes and bacteria for automatic test cases optimization in the. net environment,G,test data generation,sys.,spec. (E),N,self.,,self.,,well,manual invest.,n/a,C\#,n/a,n/a,N,
Baudry et al.\cite{baudry2005genetic},From genetic to bacteriological algorithms for mutation-based testing,G,test data generation,"unit, sys.",struc. (E),N,n/a,,n/a,,well,reduce likelihood,n/a,"Eiffel, C\#",n/a,n/a,N,
Belli and Beyaz{\i}t\cite{belli2015exploiting},Exploiting model morphology for event-based testing,G,test data generation,other,spec. (E),N,n/a,,n/a,,well,reduce likelihood,fixed number,n/a,n/a,n/a,N,
Belli et al.\cite{belli2011mutation},"Mutation Testing of"" Go-Back"" Functions Based on Pushdown Automata",A,"test data generation, test strategy evaluation",n/a,spec.,N,n/a,,n/a,,well,deterministic model,n/a,spec.,n/a,n/a,N,*
Bertolino et al.\cite{bertolino2012automatic},Automatic XACML requests generation for policy testing,A,"test data generation, test strategy evaluation",n/a,spec.,N,exi. ,,exi. ,\cite{martin2007fault},well,n/a,n/a,XACML,n/a,n/a,N,
Briand et al.\cite{briand2004assessing},Assessing and improving state-based class testing: A series of experiments,A,test strategy evaluation,unit,spec.,N,n/a,,n/a,,well, manual invest. ,n/a,"java, c++",S,S,Y,
Briand et al.\cite{briand2004using} ,Using simulation to empirically investigate test coverage criteria based on statechart, A , test strategy evaluation ,n/a,spec.,N,n/a,,n/a,,n/a,  not killed as equivalent , n/a," Java, C++ ",n/a,n/a,N,
Briand et al.\cite{briand2005improving},Improving statechart testing criteria using data flow information,A,test strategy evaluation,n/a,hybrid ,N,n/a,,n/a,,well,n/a,n/a,java,S,S,Y,
Briand et al.\cite{briand2006automated},"Automated, contract-based user testing of commercial-off-the-shelf components",G,"test data generation, test-suite reduction,test strategy evaluation",n/a,"spec., spec. (E)",N,hand.,,hand.,,not suff.,manual invest.,mutant sample,EJB,n/a,n/a,N,
Cai et al.and Lyu\cite{cai2005effect},The effects of time constraints on test case prioritization: A series of controlled experiments,A,test strategy evaluation,n/a,struc. ,N,n/a,,n/a,,n/a,n/a,n/a,C,S,S,N,
Chae et al.\cite{chae2011automated},An automated approach to reducing test suites for testing retargeted C compilers for embedded systems,A,"test data generation, test-suite reduction",other,struc. ,N,n/a,,n/a,,well,n/a,n/a,C,M,M,N,
Chen et al.\cite{chen2002can} ,Can fault-exposure-potential estimates improve the fault detection abilities of test suites?,G, test strategy evaluation ,n/a,struc. (E),Y,exi.,exi.,, Proteum ,n/a,no invest., n/a, C ,S,S,Y,
Cheon\cite{cheon2007abstraction},Abstraction in assertion-based test oracles,A, test oracle,unit,spec.,N,hand.,,hand.,manual,not suff.,manual invest.,fixed number,java,P,P,N,
Chevalley and Th{\'e}venod-Fosse\cite{chevalley2001empirical},An empirical evaluation of statistical testing designed from UML state diagrams: the flight guidance system case study,A,test data generation,n/a,spec.,N,self.,,self.,Self-written,well, manual invest. ,n/a,java,S,S,N,
Czemerinski et al.\cite{czemerinski2013behaviour}*,Behaviour abstraction coverage as black-box adequacy criteria,A,test strategy evaluation,unit,spec.,Y,exi.,exi.,,MuJava,well,no invest.,mutant sample,java,"P, S",S,Y,
Czemerinski et al.\cite{czemerinski2015behaviour} ,Behaviour abstraction adequacy criteria for API call protocol testing, A , test strategy evaluation , unit ,spec.,Y,exi.,exi.,, $\mu$-JAVA ,well,  not killed as equivalent , n/a, Java ,"P, S",S,Y,*
Dadeau et al.\cite{dadeau2011mutation},Mutation-based test generation from security protocols in HLPSL,G,test data generation,n/a,spec. (E),N,self.,,self.,,well,n/a,n/a,HLPSL,n/a,n/a,N,*
Delamare et al.\cite{delamare2011approach},An approach for testing pointcut descriptors in aspectj,A, test oracle,unit,struc. ,Y,exi.,exi.,,AjMutator,well,manual invest.,n/a,AspectJ,S,S,N,
DeMilli and Offutt\cite{demilli1991constraint} ,Constraint-based automatic test data generation,G, test data generation , unit ,struc. (E),Y,exi.,exi.,, Mothra,n/a, manual invest. , weak mutation, Fortran ,P,P,N,
DeMillo and Offutt\cite{demillo1993experimental},Experimental results from an automatic test case generator,G,test data generation,unit,struc. (E),Y,exi.,exi.,,Mothra,n/a,manual invest.,weak mutation,Fortran,n/a,n/a,N,
Denaro et al.\cite{denaro2015dynamic} ,Dynamic data flow testing of object oriented systems, A , test data generation ,int.,struc. ,Y,exi.,exi.,, PIT ,n/a, n/a , n/a, Java ,"P, S",S,Y,*
Di Nardo et al.\cite{di2015generating},Generating complex and faulty test data through model-based mutation analysis,G,test data generation,sys.,spec. (E),N,n/a,,n/a,,well,n/a,selection strategy,spec.,n/a,n/a,N,
Do and Rothermel\cite{do2005controlled},A controlled experiment assessing test case prioritization techniques via mutation faults,A,test case prioritisation,unit,struc. ,N,self.,,self.,Self-written,well,n/a,n/a,Java,n/a,n/a,Y,
Do and Rothermel\cite{do2006use}*,On the use of mutation faults in empirical assessments of test case prioritization techniques,A,test case prioritisation,"unit, sys.","struc., spec.",N,self.,,self.,Self-written,well,n/a,n/a,Java,n/a,n/a,Y,
Do et al.\cite{do2008empirical},An empirical study of the effect of time constraints on the cost-benefits of regression testing,A,test case prioritisation,n/a,"struc., struc. (E)",N,self.,,self.,Self-written,well,n/a,fixed number,java,"S, M",M,Y,
Duran and Ntafos\cite{duran1984evaluation},An evaluation of random testing,A,test strategy evaluation,n/a,hybrid ,N,n/a,,n/a,,n/a,n/a,n/a,Fortran,n/a,n/a,N,
Edwards and Shams\cite{edwards2014comparing},Comparing test quality measures for assessing student-written tests,A,test strategy evaluation,unit,struc. ,Y,exi.,exi.,,Javalanche,n/a,  not killed as equivalent ,n/a,java,n/a,n/a,N,
Edwards\cite{edwards2000black},Black-box testing using flowgraphs: an experimental assessment of effectiveness and automation potential,A,test strategy evaluation,n/a,spec.,N,n/a,,n/a,,well,manual invest.,n/a,spec.,"P, S",S,N,
Edwards\cite{edwards2001framework},"A framework for practical, automated black-box testing of component-based software",A,"test data generation, test oracle","unit, int.",spec.,N,n/a,,n/a,,well,manual invest.,n/a,C++,n/a,n/a,N,
Elbaum et al.\cite{elbaum2002test},Test case prioritization: A family of empirical studies,G,test case prioritisation,n/a,struc. (E),Y,exi.,exi.,,Proteum,n/a,n/a,n/a,C,"S,M",M,Y,
Fang et al.\cite{fang2014similarity} ,Similarity-based test case prioritization using ordered sequences of program entities, A , test case prioritisation , unit ,sim. ,Y,exi.,exi.,, Jumble ,n/a,  not killed as equivalent , n/a, Java ,"S, M",M,Y,*
Flores and Polo\cite{flores2008testing}*,Testing-based assessment process for upgrading component systems,A,test strategy evaluation,int.,spec.,N,exi.,,exi.,"MuClipse, testooj",well,n/a,n/a,java,n/a,n/a,Y,
Flores and Polo\cite{flores2012testing},Testing-based process for component substitutability,A,test strategy evaluation,int.,spec.,N,exi.,,exi.,"MuClipse, testooj",well,n/a,n/a,java,n/a,n/a,Y,
Fraser and Walkinshaw\cite{fraser2015assessing},Assessing and generating test sets in terms of behavioural adequacy,G,"test data generation, test strategy evaluation",unit,struc. (E),Y,"exi., part.","exi., part.",,"Javalanche, EvoSuite",well,n/a,n/a,java,"P, S",S,N,
Fraser and Zeller\cite{fraser2012mutation} ,Mutation-driven generation of unit tests and oracles,G," test data generation, test oracle, test-case minimisation ", unit ,struc. (E),Y,exi.,exi.,,"$\mu$TEST, Javalanche",not suff.,no invest., weak mutation, Java ,n/a,n/a,Y,
Fraser et al.\cite{fraser2013does},Does automated white-box test generation really help software testers?,G,test data generation,unit,struc. ,Y,exi.,exi.,,MAJOR,n/a,n/a,fixed number,java,"P, S",S,Y,
Fraser et al.\cite{fraser2015achieving},Achieving scalable mutation-based generation of whole test suites,G,test data generation,unit,struc. (E),Y,part.,part.,,EvoSuite,well,no invest.,"mutant sample, weak mutation",Java,n/a,n/a,Y,
Gay et al.\cite{gay2015automated},Automated oracle data selection support,G,test oracle,unit,struc. (E),N,n/a,,n/a,,well,model checker,fixed number,simulink,n/a,n/a,N,
Gay et al.\cite{gay2015risks} ,The risks of coverage-directed test case generation, A ," test data generation, test-suite reduction",unit,"struc., struc. (E)",N,exi. ,,exi. , \cite{rajan2008requirements} ,not suff.,model checker,"fixed number, weak mutation", Lustre ,"P, S",S,N,
Gligoric et al.\cite{gligoric2013comparing} ,Comparing non-adequate test suites using coverage criteria, A , test strategy evaluation ,n/a,struc. ,"Y,N",exi.,exi.,exi.," Javalanche, \cite{andrews2003general} ",not suff.,no invest.,n/a," Java, C ","S, M",M,Y,
Gonzalez-Sanchez et al.\cite{gonzalez2011prioritizing},Prioritizing tests for fault localization through ambiguity group reduction,A,fault localisation,n/a,"struc., struc. (E)",Y,part.,part.,,Zoltar,n/a,n/a,n/a,C,"S, M",M,Y,
Gopinath et al.\cite{gopinath2014code} ,Code coverage for suite evaluation by developers, A , test strategy evaluation ,unit,struc. ,Y,exi.,exi.,, PIT ,n/a, n/a , n/a, Java ,"P, S, M",M,Y,
Gupta and Jalote\cite{gupta2007test},Test inspected unit or inspect unit tested code?,A,"fault localisation, program repairing",unit,others,N,hand.,,hand.,manual,well,n/a,n/a,java,S,S,N,
Hao et al.\cite{hao2012demand},On-demand test suite reduction,G,test-suite reduction,n/a,struc. (E),Y,exi.,exi.,,"Proteum, MuJava",n/a,n/a,mutant sample,"java, c","P, S",S,Y,
Hao et al.\cite{hao2014unified} ,A unified test case prioritization approach, A , test case prioritisation ," unit, sys.",struc. ,Y,exi.,exi.,," \cite{andrews2003general}, Mujava, Javalanche ",n/a, n/a ,fixed number," Java, C ","S, M",M,Y,
Harman et al.\cite{harman2011strong} ,Strong higher order mutation-based test data generation,G, test data generation ,n/a,struc. (E),Y,exi.,exi.,, MiLu ,not suff.,  not killed as equivalent ,higher-order, C ,S,S,N,
Hennessy and Power\cite{hennessy2008analysing} ,Analysing the effectiveness of rule-coverage as a reduction criterion for test suites of grammar-based software, A , test-suite reduction ,other,others,N,self.,,self.,Self-written,well, n/a ,weak mutation,C++ Grammar ,"S, M",M,Y,
Hofer and Wotawa\cite{hofer2014does},Why does my spreadsheet compute wrong values?,A,fault localisation,other,others,N,n/a,,n/a,,well,n/a,n/a,spread-sheet,n/a,n/a,Y,
Hofer et al.\cite{hofer2015empirical},On the empirical evaluation of similarity coefficients for spreadsheets fault localization,A,fault localisation,other,others,N,n/a,,n/a,,not suff.,n/a,n/a,spread-sheet,n/a,n/a,Y,
Holt et al.\cite{holt2012state},State-based testing: Industrial evaluation of the cost-effectiveness of round-trip path and sneak-path strategies,A,test strategy evaluation,n/a,spec.,N,hand.,,hand.,Hand-seeded,well,n/a,n/a,C++,S,S,N,
Hong et al.\cite{hong2013impact} *,The impact of concurrent coverage metrics on testing effectiveness, A , test strategy evaluation ,n/a ,struc. ,N, n/a ,, n/a ,,well, n/a ,n/a, Java ,"P, S",S,N,
Hong et al.\cite{hong2015concurrency},Are concurrency coverage metrics effective for testing: a comprehensive empirical investigation,A,test strategy evaluation,n/a,struc. ,N,n/a,,n/a,,well,n/a,n/a,java,"P, S",S,N,
Hou et al.\cite{hou2007applying},Applying interface-contract mutation in regression testing of component-based software,G,test strategy evaluation,int.,spec. (E),N,n/a,,n/a,,well,n/a,weak mutation,Java,"P, S",S,Y,
Inozemtseva et al.\cite{inozemtseva2014coverage} ,Coverage is not strongly correlated with test suite effectiveness, A , test strategy evaluation , unit ,struc. ,Y,exi.,exi.,, PIT ,n/a,  not killed as equivalent , n/a, Java ,M,M,Y,
Jamrozik et al.\cite{jamrozik2012augmented},Augmented dynamic symbolic execution,G,test data generation,unit,struc. (E),N,n/a,,n/a,,n/a,n/a,n/a,C\#,n/a,n/a,N,
Jee et al.\cite{jee2014automated},Automated test case generation for FBD programs implementing reactor protection system software,A,test data generation,unit,struc. ,N,n/a,,n/a,,well,n/a,n/a,PLC,n/a,n/a,N,
Jolly et al.\cite{jolly2012automated} ,Automated unit testing of a SCADA control software: an industrial case study based on action research, A , test strategy evaluation , unit ,spec.,N,exi. ,,exi. , Mutant Power ,n/a, n/a ,fixed number, C\# ,M,M,N,
Kanewala and Bieman\cite{kanewala2013using},Using machine learning techniques to detect metamorphic relations for programs without test oracles,A,test oracle,unit,others,Y,exi.,exi.,,$\mu$-java,well,n/a,n/a,java,P,P,N,
Kapfhammer et al.\cite{kapfhammer2013search},Search-based testing of relational schema integrity constraints across multiple database management systems,A,test data generation,other,others,N,n/a,,n/a,,well,n/a,n/a,SQL ,n/a,n/a,N,
Khalil and Labiche\cite{khalil2010round},On the round trip path testing strategy,A,test strategy evaluation,n/a,spec.,Y,exi.,exi.,,MuJava,well,  not killed as equivalent ,n/a,java,S,S,Y,
Kim et al.\cite{kim2001investigating} ,Investigating the effectiveness of object-oriented testing strategies using the mutation method, A , test strategy evaluation ,n/a,"spec., struc. ",N,self.,,self.,Self-written,not suff., n/a , n/a, Java ,"P, S",S,N,*
Koster and Kao\cite{koster2007state},State coverage: a structural test adequacy criterion for behavior checking,A,test strategy evaluation,unit,struc. (E),Y,exi.,exi.,,MuJava,well,n/a,n/a,java,S,S,Y,
Kracht et al.\cite{kracht2014empirically} ,Empirically evaluating the quality of automatically generated and manually written test suites, A , test data generation , unit ,struc. ,Y,exi.,exi.,, MAJOR ,well, n/a ,n/a, Java ,"S, M",M,Y,
Kwon et al.\cite{kwon2014test} ,Test Case Prioritization Based on Information Retrieval Concepts,G, test case prioritisation , unit ,struc. (E),Y,exi.,exi.,, MAJOR ,not suff., n/a ,fixed number, Java ,S,S,Y,
Le Traon et al.\cite{le2006design},Design by contract to improve software vigilance,A,test strategy evaluation,unit,spec.,N,exi. ,,exi. ,$\mu$Slayer,well,manual invest.,n/a,Eiffel,n/a,n/a,Y,
Le Traon et al.\cite{le2007testing},Testing Security Policies: Going Beyond Functional Testing,A,"test strategy evaluation, test-suite selection",sys.,spec.,N,n/a,,n/a,,well,reduce likelihood,n/a,spec.,M,M,N,
Lee and Offutt\cite{lee2001generating},Generating test cases for XML-based Web component interactions using mutation analysis,G,test data generation,int.,struc. (E),N,n/a,,n/a,,well,n/a,n/a,XML,n/a,n/a,Y,
Lei and Andrews\cite{lei2005minimization},Minimization of randomized unit test cases,A,test case minimisation,unit,struc. ,N,n/a,,n/a,,well,  not killed as equivalent ,n/a,C,"P, S",S,N,
Li et al.\cite{li2007practical},A practical approach to testing GUI systems,A,test strategy evaluation,"int., sys.",spec.,N,n/a,,n/a,,well,manual invest.,n/a,java,S,S,N,
Liu et al.\cite{liu2006approach} ,An approach to test data generation for killing multiple mutants,G, test data generation , unit ,struc. (E),N,self.,,self.,Self-written,well, manual invest. , weak mutation, Java ,P,P,N,
Lorber\cite{lorber2015model},Model-Based Mutation Testing of Synchronous and Asynchronous Real-Time Systems,G,test data generation,n/a,spec. (E),Y,exi.,exi.,,MoMuT::UML,n/a,n/a,n/a,spec.,n/a,n/a,N,
Lou et al.\cite{lou2015mutation},Mutation-based test-case prioritization in software evolution,G,test case prioritisation,unit,struc. (E),Y,exi.,exi.,,Javalanche,well,n/a,fixed number,java,"S, M",M,Y,
Loyala et al.\cite{loyola2014dodona} ,Dodona: automated oracle data set selection, A ,test oracle, unit ,others,Y,exi.,exi.,, MAJOR ,n/a, n/a ,n/a, Java ,S,S,Y,
Mariani et al.\cite{mariani2007compatibility},Compatibility and regression testing of COTS-component-based software,A,"test data generation, test case prioritisation",int.,spec.,N,hand.,,hand.,,well,manual invest.,n/a,java,n/a,n/a,N,
Mayer and Guderlei\cite{mayer2006random},On random testing of image processing applications,A,"test data generation, test strategy evaluation",n/a,spec.,Y,exi.,exi.,,MuJava,well,n/a,n/a,java,n/a,n/a,N,
Mayer and Schneckenburger\cite{mayer2006empirical},An empirical analysis and comparison of random testing techniques,A,test strategy evaluation,n/a,spec.,Y,exi.,exi.,,MuJava,well,n/a,n/a,java,n/a,n/a,N,
Mcminn et al.\cite{mcminn2015effectiveness},The effectiveness of test coverage criteria for relational database schema integrity constraints,A,"test strategy evaluation, test data generation",other,struc. ,Y,exi.,exi.,,SchemaAnalyst,well,reduce likelihood,n/a,SQL ,n/a,n/a,N,
Milani et al.\cite{milani2014leveraging} ,Leveraging existing tests in automated test generation for web applications, A , test data generation , unit ,spec.,Y,exi.,exi.,, MUTANDIS \cite{mirshokraie2013efficient} ,well,reduce likelihood, n/a, JavaScript ,"S, M",M,Y,
Miller and Strooper\cite{miller2012case},A case study in model-based testing of specifications and implementations,A,test strategy evaluation,n/a,spec.,"Y, N","exi., hand.",exi.,hand.,"MuJava, manual",well,manual invest.,mutant sample,java,n/a,n/a,N,
Mirshokraie\cite{mirshokraie2014effective},Effective test generation and adequacy assessment for JavaScript-based web applications,G,"test data generation, test oracle, test strategy evaluation",unit,struc. (E),Y,exi.,exi.,,MUTANDIS,n/a,n/a,n/a,JavaScript,n/a,n/a,N,
Moon et al.\cite{moon2014ask},Ask the mutants: Mutating faulty programs for fault localization,G,fault localisation,n/a,struc. (E),Y,exi.,exi.,,Proteum,not suff.,n/a,selection strategy,C,"S, M",M,Y,
Mottu et al.\cite{mottu2012static},Static analysis of model transformations for effective test generation,A,test data generation,n/a,struc. (E),N,n/a,,n/a,,well,n/a,n/a,AspectJ,n/a,n/a,Y,
Mouchawrab et al.\cite{mouchawrab2007assessing} *,"Assessing, comparing, and combining statechart-based testing and structural testing: An experiment", A , test data generation,n/a,"spec., struc. ",Y,exi.,exi.,, Mujava ,n/a, manual invest. ,n/a,Java,S,S,Y,*
Mouchawrab et al.\cite{mouchawrab2011assessing} ,"Assessing, comparing, and combining state machine-based testing and structural testing: a series of experiments", A , test data generation,n/a,"spec., struc. ",Y,exi.,exi.,, Mujava ,n/a, manual invest. ,n/a,Java,S,S,Y,
Murtaza et al.\cite{murtaza2011diagnosing},Diagnosing new faults using mutants and prior faults (NIER track),G,fault localisation,n/a,struc. (E),N,exi. ,,exi. , \cite{andrews2003general} ,not suff.,n/a,n/a,C,M,M,Y,
Namin and Andrews\cite{namin2009influence} ,The influence of size and coverage on test suite effectiveness, A , test strategy evaluation , unit ,struc. ,Y,exi.,exi.,, Proteum ,well,  not killed as equivalent ,fixed number,C,S,S,Y,
Ntafos\cite{ntafos1984evaluation}*,An evaluation of required element testing strategies,A,test strategy evaluation,n/a,"struc., spec.",N,exi. ,,exi. ,\cite{budd1979mutation},well,n/a,n/a,Fortran,n/a,n/a,N,
Ntafos\cite{ntafos1984required},On required element testing,A,test strategy evaluation,n/a,struc. ,N,n/a,,n/a,,n/a,n/a,n/a,Fortran,P,P,Y,
Offutt and Liu\cite{offutt1999generating},Generating test data from SOFL specifications,A,test data generation,int.,spec.,Y,exi.,exi.,,Mothra,well,no invest.,n/a,n/a,n/a,n/a,N,
Offutt et al.\cite{offutt1995procedures},Procedures for reducing the size of coverage-based test sets,G,test-suite reduction,unit,struc. (E),Y,exi.,exi.,, Mothra,well,n/a,n/a,Fortran,P,P,N,
Papadakis and Malevris\cite{papadakis2010automatic} *,Automatic mutation test case generation via dynamic symbolic execution,G, test data generation , unit ,struc. (E),Y,part.,part.,,jFuzz,well,"  not killed as equivalent, manual invest. ",n/a, Java ,"P, S",S,Y,
Papadakis and Malevris\cite{papadakis2011automatically} ,"Automatically performing weak mutation with the aid of symbolic execution, concolic testing and search-based testing",G, test data generation , unit ,struc. (E),Y,part.,part.,, jFuzz ,well, manual invest. ,weak mutation, Java ,n/a,n/a,Y,
Papadakis and Malveris\cite{papadakis2012mutation} ,Mutation based test case generation via a path selection strategy,G, test data generation , unit ,struc. (E),N, n/a ,, n/a ,,well,  not killed as equivalent , weak mutation,"Delphi, C, n/a",P,P,N,
Papadakis et al.\cite{papadakis2012using},"Using mutants to locate ""unknown"" faults",G,fault localisation,unit,struc. (E),Y,exi.,exi.,,Proteum,n/a,no invest.,mutant sample,C,"P, S",S,Y,
Papadakis et al.\cite{papadakis2014sampling} ,Sampling program inputs with mutation analysis: Going beyond combinatorial interaction testing, A , test-suite selection ,n/a,spec. (E),N, n/a ,, n/a ,,well,  not killed as equivalent , n/a, C ,S,S,Y,
Papadakis et al.\cite{papadakis2015metallaxis},Metallaxis-FL: mutation-based fault localization,G,fault localisation,unit,struc. (E),Y,exi.,exi.,,Proteum,not suff.,no invest.,mutant sample,C,"S, M",M,Y,
Patrick et al.\cite{patrick2015subdomain},Subdomain-based test data generation,G,test data generation,n/a,hybrid ,Y,exi.,exi.,,MuJava,n/a,n/a,n/a,java,"P, S",S,N,
Pinte et al.\cite{pinte2008techniques},"Techniques and tools for the automatic generation of optimal test data at code, model and interface level",A,test data generation,unit,struc. ,Y,exi.,exi.,,MuJava,n/a,n/a,n/a,java,n/a,n/a,N,
Polo et al.\cite{polo2007integrating},Integrating techniques and tools for testing automation,A,test data generation,unit,struc. ,Y,exi.,exi.,,MuJava,well,manual invest.,n/a,java,S,S,Y,
Pretschner et al.\cite{pretschner2008model},Model-based tests for access control policies,A,"test data generation, test strategy evaluation",n/a,spec.,N,n/a,,n/a,,well,n/a,n/a,spec.,n/a,n/a,N,
Qi et al.\cite{qi2013efficient},Efficient automated program repair through fault-recorded testing prioritization,G,program repairing,n/a,struc. (E),Y,part.,part.,,TrpAutoRepair,not suff.,n/a,n/a,C,"M, L",L,Y,
Qu et al.\cite{qu2007combinatorial} ,Combinatorial interaction regression testing: A study of test case generation and prioritization, A ," test data generation, test case prioritisation ",n/a,spec.,N,exi. ,,exi. , \cite{andrews2003general} ,not suff., n/a ,fixed number, C ,"S, M",M,Y,
Qu et al. \cite{qu2008configuration} ,Configuration-aware regression testing: an empirical study of sampling and prioritization,G, test case prioritisation ,n/a,spec. (E),N,exi. ,,exi. , \cite{andrews2003general} ,n/a, n/a ,fixed number, C ,M,M,Y,
Qu et al.\cite{qu2012configuration} ,Configuration selection using code change impact analysis for regression testing, A , test-suite selection ,n/a,spec.,N,exi. ,,exi. , \cite{andrews2003general} ,n/a, n/a , n/a,C/C++,"S, M",M,N,
Rojas et al.\cite{rojas2015combining},Combining multiple coverage criteria in search-based unit test generation,G,test data generation,unit,"struc., struc. (E)",Y,exi.,exi.,,EvoSuite,well,n/a,n/a,java,M,M,N,
Rothermel et al.\cite{rothermel1999test}*,Test case prioritization: An empirical study,G,test case prioritisation,n/a,"struc., struc. (E)",Y,exi.,exi.,,Proteum,n/a,n/a,n/a,C,S,S,Y,
Rothermel et al.\cite{rothermel2001prioritizing} ,Prioritizing test cases for regression testing,G, test case prioritisation ,n/a,struc. (E),Y,exi.,exi.,, Proteum ,n/a,  not killed as nonequivalent , n/a, C ,S,S,Y,
Rubab et al.\cite{rubab2014model},Model-based testing of obligations,A,test data generation,n/a,spec.,N,hand.,,hand.,,well,n/a,n/a,spec.,n/a,n/a,N,
Rutherford et al.\cite{rutherford2006simulation}*,Simulation-based test adequacy criteria for distributed systems,A,test strategy evaluation,sys.,spec.,Y,exi.,exi.,,MuJava,not suff.,manual invest.,n/a,java,S,S,N,
Rutherford et al.\cite{rutherford2008evaluating},Evaluating test suites and adequacy criteria using simulation-based models of distributed systems,A,test strategy evaluation,sys.,spec.,Y,exi.,exi.,,MuJava,well,n/a,n/a,java,S,S,N,
Schuler and Zeller\cite{schuler2011assessing}*,Assessing oracle quality with checked coverage,A,test strategy evaluation,unit,struc. ,Y,exi.,exi.,,Javalanche,n/a,n/a,n/a,java,"S, M",M,Y,
Schuler and Zeller\cite{schuler2013checked},Checked coverage: an indicator for oracle quality,A,test strategy evaluation,unit,struc. ,Y,exi.,exi.,,Javalanche,n/a,n/a,n/a,java,"S, M",M,Y,
Segura et al.\cite{segura2010automated},Automated test data generation on the analyses of feature models: A metamorphic testing approach,A,test data generation,n/a,spec.,Y,exi.,exi.,,MuClipse,well,manual invest.,n/a,java,S,S,Y,
Shahamiri et al.\cite{shahamiri2012artificial},Artificial neural networks as multi-networks automated test oracle,A,test oracle,n/a,spec.,N,n/a,,n/a,,not suff.,n/a,n/a,C\#,n/a,n/a,N,
Shelton et al.\cite{shelton2012adding},Adding criteria-based tests to test driven development,G,development scheme evaluation,unit,others,Y,exi.,exi.,,MuJava,n/a,manual invest.,n/a,java,n/a,n/a,N,*
Shi et al.\cite{shi2014balancing} ,Balancing trade-offs in test-suite reduction,G, test-suite reduction ,n/a,"struc., struc. (E)",Y,exi.,exi.,, PIT ,well, n/a , n/a, Java ,"P, S",S,Y,
Shi et al. \cite{shi2015measuring} ,Measuring the Diversity of a Test Set With Distance Entropy, A , test strategy evaluation ,n/a,sim. ,Y,self.,self.,, mutate.py ,not suff., manual invest. ,fixed number, C ,"S, M",M,Y,
Shi et al.\cite{shi2015comparing},Comparing and combining test-suite reduction and regression test selection,A,test-suite reduction,unit,struc. ,Y,exi.,exi.,,PIT,n/a,n/a,n/a,java,"S, M",M,Y,
Shrestha and Rutherford\cite{shrestha2011empirical},An empirical evaluation of assertions as oracles,A,test oracle,unit,struc. ,Y,exi.,exi.,,MuJava,well,manual invest.,n/a,java,"P, S",S,Y,
Simith and Williams\cite{smith2009guiding} *,On guiding the augmentation of an automated test suite via mutation analysis,G, test data generation , unit ,struc. (E),Y,exi.,exi.,, MuClipse ,well,no invest., n/a, Java ,S,S,Y,
Smith and Williams\cite{smith2009should},Should software testers use mutation analysis to augment a test set?,G,test strategy evaluation,unit,struc. (E),Y,exi.,exi.,,"Jumble, MuClipse",well,n/a,n/a,java,S,S,N,*
Staats et al.\cite{staats2011better} ,Better testing through oracle selection (NIER track),A,test oracle,n/a,others,N,n/a,,n/a,,n/a,model checker,fixed number,Lustre,n/a,n/a,N,
Staats et al.\cite{staats2012automated} ,"Automated oracle creation support, or: how I learned to stop worrying about fault propagation and love mutation testing",G,test oracle,unit,struc. (E),N,exi. ,,exi. , \cite{rajan2008requirements} ,not suff.,model checker,fixed number, Lustre ,S,S,N,
Staats et al.\cite{staats2012oracle},Oracle-centric test case prioritization,A,test case prioritisation,unit,struc. ,Y,exi.,exi.,,Sofya,well,n/a,fixed number,java,S,S,N,
Stephan and Cordy\cite{stephan2014model},Model Clone Detector Evaluation Using Mutation Analysis,A,model clone detection,n/a,others,N,n/a,,n/a,,well,n/a,mutant sample,simulink,n/a,n/a,N,
Tan and Edwards\cite{tan2008evaluating},Evaluating automated unit testing in sulu,A,"test data generation, test strategy evaluation",unit,struc. ,N,exi. ,,exi. ,sulu tool,well,n/a,n/a,sulu,n/a,n/a,N,
Tasiran et al.\cite{tasiran2012location},Location pairs: a test coverage metric for shared-memory concurrent programs,A,test strategy evaluation,n/a,struc. ,N,n/a,,n/a,,well,n/a,n/a,java,n/a,n/a,N,
Tuya et al.\cite{tuya2010full} ,Full predicate coverage for testing SQL database queries, A , test strategy evaluation ,other,struc. ,Y,exi.,exi.,, SQLMutation ,well,"reduce likelihood, manual invest.", n/a, SQL ,n/a,n/a,Y,
Vergilio et al.\cite{vergilio2006constraint},Constraint based structural testing criteria,A,test strategy evaluation,n/a,struc. (E),Y,exi.,exi.,,Proteum,well,manual invest.,n/a,C,n/a,n/a,N,
Vincenzi et al.\cite{vincenzi2001unit},Unit and integration testing strategies for C programs using mutation,G,test data generation,"unit, int.",struc. (E),Y,exi.,exi.,,"Proteum, Proteum/IM",well,manual invest.,selection strategy,C,S,S,Y,*
Vivanti et al.\cite{vivanti2013search} ,Search-based data-flow test generation,G, test data generation , unit ,"struc., struc. (E)",Y,part.,part.,, EvoSuite ,n/a, n/a ,weak mutation, Java ,n/a,n/a,Y,
von Mayrhauser et al.\cite{von2000planner},Planner based error recovery testing,G,test data generation,n/a,spec. (E),N,n/a,,n/a,,well,n/a,n/a,n/a,L,L,N,
Wang et al.\cite{wang2010correlating},Correlating context-awareness and mutation analysis for pervasive computing systems,A,test strategy evaluation,n/a,sim. ,Y,exi.,exi.,,MuClipse,well,  not killed as equivalent ,n/a,Java,S,S,N,*
Wang et al.\cite{wang2015experience} ,Experience report: how is dynamic symbolic execution different from manual testing? a study on KLEE, A , test data generation ,n/a,struc. ,N,exi. ,,exi. , \cite{andrews2003general} ,n/a, n/a ,fixed number, C ,"S, M",M,Y,
Watanabe and Sakamura\cite{watanabe1996specification},A specification-based adaptive test case generation strategy for open operating system standards,A,test data generation,int.,spec.,N,n/a,,n/a,,well,n/a,n/a,spec.,n/a,n/a,N,
Weyuker et al.\cite{weyuker1994automatically},Automatically generating test data from a Boolean specification,A,test data generation,n/a,spec.,N,n/a,,n/a,,well,n/a,n/a,n/a,n/a,n/a,N,*
Whalen et al.\cite{whalen2013observable} ,Observable modified condition/decision coverage, A , test strategy evaluation ,n/a,struc. (E),N,exi. ,,exi. , \cite{rajan2008requirements} ,not suff.,model checker,fixed number, Simulink ,n/a,n/a,N,
Xie et al.\cite{xie2011testing},Testing and validating machine learning classifiers by metamorphic testing,A,test strategy evaluation,n/a,others,Y,exi.,exi.,,MuJava,well,manual invest.,fixed number,java,n/a,n/a,Y,
Xu and Ding\cite{xu2010prioritizing},Prioritizing state-based aspect tests,A,test case prioritisation,n/a,spec.,N,n/a,,n/a,,well,n/a,n/a,AspectJ,S,S,N,
Xu et al.\cite{xu2012testing},Testing aspect-oriented programs with finite state machines,A,test strategy evaluation,n/a,spec.,N,hand.,,hand.,,well,n/a,n/a,AspectJ,S,S,N,
Xuan and Monperrus\cite{xuan2014test} ,Test case purification for improving fault localization, A , fault localisation , unit ,others,Y,exi.,exi.,, PIT ,well, n/a ,fixed number, Java ,"S, M",M,Y,*
Ye and Jacobsen\cite{ye2013whitening},Whitening SOA testing via event exposure,A,"test data generation, test strategy evaluation",int.,hybrid ,N,hand.,,hand.,,not suff.,  not killed as equivalent ,n/a,n/a,S,S,N,
Yoo and Harman\cite{yoo2012test},Test data regeneration: generating new test data from existing test data,A,test data generation,unit,struc. ,Y,exi.,exi.,, Mujava ,well,no invest.,n/a,Java,n/a,n/a,Y,
Yoon and Choi\cite{yoon2004effective},Effective test case selection for component customization and its application to Enterprise JavaBeans,A,test-suite selection,int.,hybrid ,N,self.,,self.,TECC,well,n/a,selection strategy,EJB,n/a,n/a,N,
You et al.\cite{you2015efficient} ,Efficient Observability-based Test Generation by Dynamic Symbolic Execution, A , test data generation ,n/a,struc. (E),N,exi. ,,exi. ,\cite{rajan2008requirements} ,not suff.,no invest.,fixed number, Lustre ,n/a,n/a,N,
Zhan and Clark\cite{zhan2008search},A search-based framework for automatic testing of MATLAB/Simulink models,G,"test data generation, test-suite reduction",n/a (code level),"struc., struc. (E)",N,self.,,self.,,not suff.,manual invest.,n/a,simulink,n/a,n/a,N,
Zhang and Mesbah\cite{zhang2015assertions} ,Assertions are strongly correlated with test suite effectiveness, A , test strategy evaluation , unit ,struc. (E),Y,exi.,exi.,, PIT ,well,  not killed as equivalent , n/a, Java ,M,M,Y,
Zhang et al. \cite{zhang2013bridging} ,Bridging the gap between the total and additional test-case prioritization strategies, A , test case prioritisation , unit ,struc. ,Y,exi.,exi.,, Mujava ,n/a, n/a , n/a, Java ,"S, M",M,Y,
Zhang et al.\cite{wang2009taming} ,Taming coincidental correctness: Coverage refinement with context patterns to improve fault localization, A , fault localisation ,n/a,struc. (E),Y,exi.,exi.,, Proteum ,not suff., n/a , n/a, C ,S,S,Y,*
Zhang et al.\cite{zhang2009time},Time-aware test-case prioritization using integer linear programming,A,test case prioritisation,n/a,struc. ,Y,exi.,exi.,,Jester,well,n/a,fixed number,java,S,S,Y,
Zhang et al.\cite{zhang2010test} ,Test generation via dynamic symbolic execution for mutation testing,G, test data generation ,n/a,struc. (E),Y,exi.,exi.,," PexMutator, GenMutants ",well, manual invest. , weak mutation, C\# ,"P, S",S,Y,
Zhang et al.\cite{zhang2011empirical} ,An empirical study of junit test-suite reduction, A , test-suite reduction , unit ,struc. ,Y,exi.,exi.,, MuJava ,well, n/a ,fixed number, Java ,"S, M",M,Y,
Zhang et al.\cite{zhang2014search},Search-based inference of polynomial metamorphic relations,A,test oracle,n/a,spec.,Y,exi.,exi.,,MuClipse,not suff.,n/a,n/a,"java, C/C++",S,S,Y,
Zhou and Frankl\cite{zhou2011jdama} ,JDAMA: Java database application mutation analyser, A ," test data generation, test strategy evaluation ",n/a,struc. ,Y,exi.,exi.,, JDAMA (based on SQLMutation) ,well,"reduce likelihood, manual invest.", weak mutation," Java, sql",n/a,n/a,Y,
Carzaniga et al.\cite{carzaniga2013automatic},Automatic Recovery from Runtime Failures,A,program repairing,n/a,others,Y,exi.,exi.,,MAJOR,well,manual invest.,n/a,java,n/a,n/a,Y,
Xue and Namin\cite{xue2013significant},How significant is the effect of fault interactions on coverage-based fault localizations?,A,fault localisation,unit,struc. ,Y,exi.,exi.,,MuJava,well,n/a,fixed number,java,S,S,Y,
Carzaniga et al.\cite{carzaniga2014cross},Cross-Checking Oracles from Intrinsic Software Redundancy,A,test oracle,unit,others,Y,exi.,exi.,,MAJOR,well,n/a,selection strategy,java,n/a,n/a,Y,
Fraser et al.\cite{fraser2015does}*,Does Automated Unit Test Generation Really Help Software Testers? A Controlled Empirical Study,A,test data generation,unit,struc. ,Y,exi.,exi.,,MAJOR,n/a,n/a,fixed number,java,"P,S",S,Y,
Rojas et al.\cite{rojas2015automated},Automated unit test generation during software development: A controlled experiment and think-aloud observations,A,test data generation,unit,struc. ,Y,exi.,exi.,,MAJOR,n/a,n/a,n/a,java,P,P,Y,
Wedyan et al.\cite{wedyan2015approach},An approach and tool for measurement of state variable based data-flow test coverage for aspect-oriented programs,A,test strategy evaluation,unit,struc. ,Y,exi.,exi.,,"AjMutator, Proteum/AJ, mujava",well,manual invest.,n/a,AspectJ,"S,M",M,N,
Murphy et al.\cite{murphy2009automatic},Automatic System Testing of Programs without Test Oracles,A,test oracle,sys.,others,N,n/a,,n/a,,,n/a,n/a,java,n/a,,Y,
Pastore et al.\cite{pastore2013crowdoracles},CrowdOracles: Can the Crowd Solve the Oracle Problem?,A,test oracle,unit,others,Y,exi.,exi.,,MuJava,well,n/a,selection strategy,java,n/a,,N,
Taneja and Xie\cite{taneja2008diffgen},DiffGen: Automated Regression Unit-Test Generation,A,test data generation,unit,struc. ,Y,exi.,exi.,,MuJava,n/a,manual invest.,n/a,java,"P, S",S,Y,
Fraser and Zeller\cite{fraser2011generating},Generating Parameterized Unit Tests,G,test data generation,unit,struc. (E),Y,exi.,exi.,,"$\mu$TEST, Javalanche",n/a,n/a,n/a,java,"S,M",M,Y,
Mirshokraie et al.\cite{mirshokraie2015jseft},JSEFT: Automated JavaScript Unit Test Generation,G,"test data generation, test oracle",unit,struc. (E),Y,exi.,exi.,,MUTANDIS,not suff.,reduce likelihood,fixed number,JavaScript,"S,M",M,Y,
El-Fakih et al.\cite{el2014studying},On Studying the Effectiveness of Extended Finite State Machine Based Test Selection Criteria,A,test strategy evaluation,n/a,spec.,N,self.,,self.,,well,n/a,n/a,spec.,n/a,,N,
Vemasani et al.\cite{vemasani2014generating},Generating Test Data to Distinguish Conjunctive Queries with Equalities,G,test data generation,other,struc. (E),Y,exi.,exi.,, SQLMutation ,well,deterministic model,n/a,SQL ,n/a,,Y,
Patrick et al.\cite{patrick2013using},Using Mutation Analysis to Evolve Subdomains for Random Testing,A,test data generation,n/a,struc. ,Y,exi.,exi.,,MuJava,n/a,n/a,n/a,java,"P, S",S,Y,
Riener et al.\cite{riener2011test},Test Case Generation from Mutants using Model Checking Techniques,G,test data generation,n/a,struc. (E),N,n/a,,n/a,,well,deterministic model,n/a,ANSI-C,n/a,n/a,N,
Just and Schweiggert\cite{just2009evaluating},Evaluating testing strategies for imaging software by means of Mutation Analysis,A,test strategy evaluation,n/a,others,Y,exi.,exi.,,MuJava,well,n/a,n/a,java,n/a,n/a,Y,
Knauth et al.\cite{knauth2009assertion},Assertion-Driven Development: Assessing the Quality of Contracts using Meta-Mutations,A,test strategy evaluation,n/a,spec.,N,self.,,self.,,not suff.,n/a,n/a,JML,S,S,N,
Bradbury et al.\cite{bradbury2007comparative},Comparative Assessment of Testing and Model Checking Using Program Mutation,A,test strategy evaluation,n/a,spec.,N,exi.,,exi.,ExMAn,well,  not killed as nonequivalent ,n/a,java,"P, S",S,N,
Poulding and Clark\cite{poulding2010efficient},Efficient Software Verification: Statistical Testing Using Automated Search,A,test strategy evaluation,n/a,struc. ,Y,exi.,exi.,,Proteum/IM,well,  not killed as nonequivalent ,selection strategy,C,"P, S",S,N,
Gallardo et al.\cite{gallardo2006assessment},Assessment of Data Diversity Methods for Software Fault Tolerance Based on Mutation Analysis,A,fault tolerance,n/a,others,N,exi.,,exi.,"Proteum/IM, CreateMutants.py ",well,n/a,n/a,C,n/a,n/a,N,
